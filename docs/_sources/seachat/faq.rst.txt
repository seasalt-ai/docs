.. _SeaChat_faq:

===========================================
SeaChat-FAQ
===========================================

.. _SeaChat: https://seachat.seasalt.ai/

.. toctree::
   :maxdepth: 4
   :caption: Contents:

.. contents:: Table of Contents
    :local:
    :depth: 3


Introduction
============

In this section we will walk you through SeaChat-FAQ: our Fast & Accurate FAQ product.
Our FAQ product has the following features:

* support multiple FAQ sheets
* support expiration dates, perfect for time-sensitive FAQs such as marketing promotions
* Customizable thesaurus (synonyms)
* Customizable stopword list
* Transformers-based Pre-training
* Supervised Fine-tuning
* Probabilistic Reranking

Where Rasa's Default FAQ Comes Short
------------------------------------------------

SeaChat-FAQ is a great improvement to Rasa's `ResponseSelector <https://blog.rasa.com/response-retrieval-models/>`__, which is architected like this:

.. image:: https://blog.rasa.com/content/images/2019/09/SRS-Blog--1--1.png

The algorithm in a nutshell is: Build a classifier between *new queries* and existing *answers*
(Q<->A match).

While it works reasonably well for small demos, it will not scale to larger dataset.
Suppose we have an FAQ sheet with 2,000 entries. This design has the following limitations:

1. **Data Sparsity**: Because a SoftMax classifier is built for the number of FAQ entries, 
   ``ResponseSelector`` will need to build for 2,000 class labels, which faces data sparsity issues 
   given the small amount of FAQ pairs.

    * This has the implication of **Long Training Time** in production usage: if one FAQ entry is 
      changed, then Rasa retrains the whole classifier.

2. **Only Q<->A Matching, no Q<->Q Matching**: comparison is made between new *queries* (Q) and 
   *answers* (A). However, the *questions* (Q) in an FAQ are not used at all.

    * This has the implication of **Controllability** in production usage: often when a query
      does not match an FAQ entry, the user *cannot* very quickly add the query as a similar 
      question to the FAQ sheet to solve the problem.


In essence, these shortcomings are due to the way that *Rasa treats the FAQ problem as 
a classification (i.e., NLU) problem*. Based on years of research from the Information Retrieval 
community, such as `SigIR <https://sigir.org/>`_, we believe *FAQ problem is a retrieval and reranking problem*.


How SeaChat-FAQ Improves
------------------------------------------------

This is how SeaChat-FAQ works in a nutshell:

1. **Fast**: Use ElasticSearch to index and retrieve related FAQ entries to a new query.
2. **Accurate**: Use a customizable reranker to rerank the retrieved results.

.. admonition:: Generalization vs. Overfitting 

  SeaChat-FAQ can use Transformer-based language model embeddings to index and compare 
  sentences to achieve better generalization and avoid the infamous overfitting problem.

Meanwhile, to make this product production-ready, SeaChat-FAQ adds synonym/stopwords support.
It also works with Excel sheets off-the-shelf, whose format is used by almost all customers.

.. admonition:: Marketing Campaigns Supported

  SeaChat-FAQ comes with timezone support, and filters FAQ entries by its expiration  
  dates if presented. So it is suitable for running time-sensitive marketing campaigns such as promotions. 

Configuration
========================

In this section we list a few common configurations for SeaChat-FAQ:

1. :ref:`minimal_configuration_for_FAQ_only`
2. :ref:`minimal_configuration_for_FAQ_NLU`
3. :ref:`full_configuration_for_FAQ_NLU`

.. _minimal_configuration_for_FAQ_only:

Minimal Configuration for FAQ Only
------------------------------------------------

.. code-block:: yaml

    language: en
    importers:
      - name: seachat_plugins.importers.faq_importer.FAQImporter
        faq_paths:
          - data/faq.csv
        synonym_paths:
          - data/synonym.csv
    
    pipeline:
      - name: seachat_plugins.nlu.selectors.elastic_selector.ElasticSelector
        stopword_paths:
          - data/stopwords.txt   # must be in utf-8 encoding
        es_indexing:
          host: localhost
          port: 9200
          index_name: faq  # must all be lower case, must not contain the characters #, \, /, *, ?, ", <, >, |, ,

The :ref:`FAQImporter <FAQImporter>` reads FAQ/synonym data files on disk and validate them.
The :ref:`ElasticSelector <ElasticSelector>` builds an index for all the FAQ/synonym data with
ElasticSearch and trains a machine learning model to rerank the retrieved results.

If you run an *FAQ only* bot and have ElasticSearch locally running, the above configuration will
get you started. Note that the above configuration will completely bypass NLU: the NLU training files
will not even be read into SeaChat. Thus it is only suitable if you build an *FAQ-only* bot.

.. todo:: a normal user won't be able to run the FAQ bot *locally* (only Seasalt developers can).
   Need to change the params of ES to our online version

.. tip:: ``faq_paths`` and ``synonym_paths`` support a list of files.


.. _minimal_configuration_for_FAQ_NLU:

Minimal Configuration for FAQ + NLU
------------------------------------------------

.. code-block:: yaml

    language: en
    importers:
      - name: seachat_plugins.importers.faq_importer.FAQImporter
        faq_paths:
          - data/faq.csv
        synonym_paths:
          - data/synonym.csv
      - name: RasaFileImporter # import other training data from data folder, such as nlu.json and responses.md
    
    pipeline:
      - name: WhitespaceTokenizer
      - name: LexicalSyntacticFeaturizer
      - name: CountVectorsFeaturizer
        analyzer: char_wb
        min_ngram: 1
        max_ngram: 4
      - name: DIETClassifier
        epochs: 10
        random_seed: 42
      - name: EntitySynonymMapper  # enable this if you have synonyms in your .csv files and other NLU intents (RasaFileImporter is enabled)
      - name: seachat_plugins.nlu.selectors.elastic_selector.ElasticSelector
        stopword_paths:
          - data/stopwords.txt   # must be in utf-8 encoding
        es_indexing:
          host: localhost
          port: 9200
          index_name: faq  # must all be lower case, must not contain the characters #, \, /, *, ?, ", <, >, |, ,

For importing NLU data, the default `RasaFileImporter <https://rasa.com/docs/rasa/training-data-importers/>`_ needs to be used. Then SeaChat searches corresponding training data
from the ``data`` folder by default.

For training NLU, `configure the NLU pipeline <https://rasa.com/docs/rasa/tuning-your-model>`_
as usual. Just replace the default `ResponseSelector <https://rasa.com/docs/rasa/2.0.x/components#responseselector>`__.
with SeaChat's ``ElasticSelector``.

.. Note:: SeaChat's components are designed as plugins to Rasa that you only need to add them 
   to your ``config.yml`` file or replace a default component. 

.. _full_configuration_for_FAQ_NLU:

Full Configuration for FAQ + NLU + Dialogue
------------------------------------------------

The following is a comprehensive example of ``config.yml`` for both FAQ and NLU,
for the Chinese language. A lot of parameters are tunable. We refer you to 
:ref:`FAQ Configuration Parameters <faq_config_params>` for details.

.. code-block:: yaml

    language: zh
    importers:
      # Please place FAQImporter before other importers
      - name: seachat_plugins.importers.faq_importer.FAQImporter
        faq_paths:
          - data/faq.csv
        synonym_paths:
          - data/zh_tw_synonym.csv
        output_test_faq_file: tests/test_faq.md   # used for `test nlu`, default to tests/test_faq.md: please don't change the default path
        augment_with_synonyms: true # recommended if you have synonyms
        timezone: America/Los_Angeles # timezone used for dates in your faq file. Expressed as TZ database name. E.g. Seattle is "America/Los_Angeles".
      - name: RasaFileImporter # import other training data from data folder, such as nlu.json and responses.md
    
    pipeline:
      - name: seachat_plugins.nlu.tokenizers.zhchar_tokenizer.ZhCharTokenizer
      - name: LexicalSyntacticFeaturizer
      - name: CountVectorsFeaturizer
        analyzer: char_wb
        min_ngram: 1
        max_ngram: 4
      - name: DIETClassifier
        epochs: 10
        random_seed: 42
      - name: EntitySynonymMapper  # enable this if you have synonyms in your .csv files and other NLU intents (RasaFileImporter is enabled)
      - name: seachat_plugins.nlu.selectors.elastic_selector.ElasticSelector
        stopword_paths:
          - data/stopwords_zh_tw.txt   # must be in utf-8 encoding
        method: text # options: text, bert
        es_indexing:
          host: localhost
          port: 9200
          index_name: faq  # must all be lower case, must not contain the characters #, \, /, *, ?, ", <, >, |, ,
          make_index_name_unique: false  # if true, append index_name with a time str, e.g. "faq-2020-11-15T02-36-48"
        bert_client:
          enabled: false
          host: bert-as-service
          port: 5555 # port for pushing data from client to server
          port_out: 5556 # port for publishing results from server to client
          timeout: 600000 # in milliseconds, -1 for no limit, apply to both connecting to server and total encoding time,
        eval:
          enabled: false
          metric: map, mrr # options: map, mrr
          N: 1, 3
        reranker:
          enabled: true
          identity_match_score_override: 0.95 # set to this value if identify match confidence is lower than this value, set to 0 or minus to disable it
          params:
            random_state: 42
            class_weight: balanced
            C: 1  # lower C means higher regularization, sometimes higher confidence value
            penalty: l2
          features:
            es_bow_cos_sim:
              enabled: true
            es_bow_elem_prod:
              type: count # options: count, hashing
              n_features: 10000 # n_features for HashingVectorizer, multiplied by n for each n-gram
              min_n: 1
              max_n: 4
            es_doc_score:
              enabled: true
    
    # Configuration for Rasa Core.
    # https://rasa.com/docs/rasa/core/policies/
    policies:
      # If exact conversation is present in train stories, predicts next action with confidence 1
      # name: MemoizationPolicy
      - name: seachat_plugins.core.policy.ngchat.ngChatPolicy
        dialogue_path: ./dialogue.yml
        nlu_threshold: .40
      - name: MappingPolicy


.. _faq_config_params:

FAQ Configuration Parameters
------------------------------------------------

.. _faq_importer:

FAQImporter
^^^^^^^^^^^^^^^^^

Configuration:

``faq_paths``
    A list of files to the FAQ .csv files, with relative path respective of the current 
    configuration file. See :ref:`faq_csv_format` for file format.

    Example: ``data/faq.csv``

``synonym_paths``
    A list of files to the FAQ .csv files, with relative path respective of the current 
    configuration file. See :ref:`faq_csv_format` for file format.

    Example: ``data/faq.csv``

``output_test_faq_file``
    Used for ``rasa test nlu`` for FAQ-specific testing. By default ``rasa test nlu`` only tells a 
    coarse-grained number on the overall ``faq`` intent. For instance, in ``results/intent_report.json``:

    .. code-block:: javascript

      "faq": {
        "precision": 0.6,
        "recall": 1.0,
        "f1-score": 0.7499999999999999,
        "support": 6,
        "confused_with": {}
      }

    However, with the generated test file for FAQ now a more detailed 
    ``results/response_selection_report.json`` file is reported:

    .. code-block:: json

      {
        "en_faq_sample_3": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 4,
          "confused_with": {}
        },
        "en_faq_sample_8": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 2,
          "confused_with": {}
        },
        "accuracy": 1.0,
        "macro avg": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 6
        },
        "weighted avg": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 6
        }
      }

    Example: ``tests/test_faq.md`` (default)

    The specific backend command that can be used to run with the test files is: 

    .. code-block:: bash

      rasa test nlu -u tests/test_faq.md -c config_local_only_faq.yml   --successes -vv --no-plot

``augment_with_synonyms``
    Whether to augment training data with synonyms.

    Example: ``true``/``false``, default to true if ``synonym_paths`` is included.

``timezone``
    Timezone used for dates in your faq file (See :ref:`faq_csv_format` for file format).
    Please refer to the "Canonical ID" column in `this list <http://joda-time.sourceforge.net/timezones.html>`_.
    This is also the format accepted by the
    `ElasticSearch timezone <https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html#plugins-filters-date-timezone>`_.

    Example: ``America/Los_Angeles``, default to local timezone.


.. _elastic_selector:

ElasticSelector
^^^^^^^^^^^^^^^^^

Configuration:

``stopword_paths``
    A list of files that contain stopwords, with relative path respective of the current 
    configuration file. See :ref:`stopwords_txt_format` for file format.
    
    Example: ``data/stopwords_zh_tw.txt``, must be in utf-8 encoding

``method``
    The text representation method to be used for ElasticSearch indexing and similarity matching.
    ``text`` represents using ElasticSearch text analytics, while ``bert`` represents using BERT
    embeddings (must enable ``bert_client``, see below).

    Example: ``text`` (default), options: ``text``, ``bert``

``es_indexing``
    Configuration parameters for your ElasticSearch instance:
    
    - ``host``: address of the Elasticsearch. When running locally, set to ``localhost``. 
      Can also be set through environment variable ``ES_HOST``.
    - ``port``: port of the Elasticsearch. 
      Can also be set through environment variable ``ES_PORT``.
    - ``index_name``: the name of the ES index to be injected. If the index already exists, 
      it will be deleted and the current data will be inserted into this index.
    - ``login`` and ``secret``: they can be set here in the config file, or can be set through 
      environment variables ``ES_LOGIN`` and `` ES_SECRET``.
    - ``index_name``: ElasticSearch index name. Must all be lower case, must not contain the characters 
      ``# \ / * ? " < > | ,``
    - ``make_index_name_unique``: If true, append index_name with a time str, e.g.
      "faq-2020-11-15T02-36-48", default to false.

      .. Tip:: In production system, set ``make_index_name_unique`` to ``true`` to avoid index pollution.

        If it is set to ``false``, changing the FAQ .csv file will pollute the ElasticSearch index
        because the same index is reused.

``bert_client``
    Configuration parameters for `bert-as-service <https://github.com/hanxiao/bert-as-service>`_. 

    - ``enabled``: when set to ``true``, Bert embeddings will be used in both ElasticSearch and reranker.
    - ``host``: host address. Can also be set through environment variable ``BERT_HOST``.
    - ``port``: port for pushing data from client to server, example: ``5555`` 
      (`doc <https://github.com/hanxiao/bert-as-service#client-api>`_).
      Can also be set through environment variable ``BERT_PORT``.
    - ``port_out``: port for publishing results from server to client, example: ``5556``
      (`doc <https://github.com/hanxiao/bert-as-service#client-api>`_).
      Can also be set through environment variable ``BERT_PORT_OUT``.
    - ``timeout``: time system waits for response from BERT server before aborting. In milliseconds. 
      -1 for no limit. Applies to both connecting to the BERT server and time cost for encoding data. 
      If encoding large data but has a small timeout value set here, the training process will also be
      interrupted, so make the value generous for large dataset. Can also be set through environment variable ``BERT_TIMEOUT``. Example: ``600000``.

``eval``
    Automatic evaluation parameters during SeaChat-FAQ training.

    If ``eval`` and ``bert_client`` are both enabled, the system performs an automatic evaluation of
    both text indexing and BERT indexing using ``metric@N``, and chooses the one with the higher score.
    The user-specified method is ignored 

    If only `eval` is enabled, then the system just reports its performance according to `metric`.

    - ``enabled``: true or false
    - ``metric``: Options are ``map`` (`Mean Average Precision <https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)>`_)
      or ``mrr`` (`Mean Reciprocal Rank <https://en.wikipedia.org/wiki/Mean_reciprocal_rank>`_),
      where MAP@N for a total of Q queries is defined as:
      
      .. centered:: :math:`\text{MAP@N}= \frac{1}{Q}(\frac{1}{TP_{seen}}\sum_{i=1}^{N}\frac{TP_{seen}}{i}\cdot relevant(i))`
      
      See `notation <http://sdsawtelle.github.io/blog/output/mean-average-precision-MAP-for-recommender-systems.html#Common-Variations-on-AP-Formula>`_.
      Note that MAP and MRR equal when N=1. 
    - ``N``: cutoff for MAP/MRR@N, recommended options are ``1`` or ``3``, or ``1, 3``.

``reranker``
    If ``reranker`` is enabled and text indexing is used, an MaxEnt reranker will be used.
    Otherwise if ``bert_client`` is used, a neural network reranker will be used.

    - ``enabled``: true. We recommend always setting this to ``true``.
    - ``identity_match_score_override``: The confidence score will be set to this value if a query
      is an exact match to a question in the FAQ .csv file *if* when the reranker confidence score
      is lower than this value. For instance, sometimes the ranker outputs a lowe value such as
      ``0.78`` even with identical match. This parameter is used to manually intervene this behavior.
      Set to 0 or minus to disable it. Example: ``0.95``.
    - ``params``: reranker parameters
        * ``random_state``: random seed, default to ``42``.
        * ``class_weight``: weight to assign each class label, options are ``balanced`` and ``null``.
        * ``C``: Inverse of regularization strength, must be larger than 0. Lower C means higher 
          regularization, sometimes higher confidence value. Default to ``1.0``.
        * ``penalty``: L1 or L2 norms in regularization. Options are ``l1`` and ``l2``. 
          Default to ``l2``.
    - ``features``: These features are for text indexing and MaxEnt Reranker (method: ``text``) only.
        * ``es_bow_cos_sim``: Cosine similarity between query and document bag-of-ngrams vectors
            *  ``enabled``: ``true`` (default) or ``false``.
        * ``es_bow_elem_prod``: Elementwise product of query and document n-gram vectors
            * ``type``: options are ``count`` and ``hashing``. On a small dataset, ``count`` is 
              preferred. On a large dataset, ``hashing`` and ``count`` are not very different in terms 
              of accuracy, but ``hashing`` might save more memory.
            * ``n_features``: This only applies if type is ``hashing``, used to limit the number 
              of total features to avoid OOM. Example: ``10000``.
            * ``min_n`` and ``max_n``: range of n-grams to be used.
        * ``es_doc_score``: Elasticsearch score of each retrieved document
            * ``enabled``: ``true`` (default) or ``false``.


File Format
================================================

.. _faq_csv_format:

faq.csv File Format
------------------------------------------------

The FAQ .csv file is a utf-8 encoded .csv file with the following header:

- ``ID``: any unique number or string to denote this FAQ entry.
- ``Answer``: answer in an FAQ entry
- ``Category``: reserved for customers who want to categorize their FAQs.
- ``Keywords``: reserved for customers who want to describe their FAQs with keywords.
  It is used for retrieval too.
- ``From date``: if set, the FAQ will be effective *from* this date (inclusive); if not set,
  then the FAQ is effective until ``To date``. Accepted format 
  is the one that can be parsed by `dateparser <https://dateparser.readthedocs.io/en/latest/>`_. 
  Example: "January 12, 2021", "1/12/2021".
- ``To date``: if set, the FAQ will be effective *through* this date (inclusive); if not set,
  then the FAQ will not expire.
- ``Question``, ``Question``, ``More Questions``, ``...``: a list of similar questions to this FAQ entry.

Correspondingly, if your FAQ is in Simplified or Traditional Chinese, the following header is assumed:

- Simplified Chinese: ('ID', '答案', '分类', '关键词', '开始日期', '结束日期', '问题', '问题', '更多问题', ...)
- Traditional Chinese: ('ID', '回答', '類目', '關鍵詞', '開始日期', '結束日期', '問題', '問題', '更多問題', ...)

:download:`Sample FAQ csv file: en_faq_sample.csv <../_static/faq/en_faq_sample.csv>`

.. _synonym_csv_format:

synonym.csv File Format
------------------------------------------------

The synonym .csv file's format is very simple: just on each line list a group of synonyms, e.g.:

.. code-block:: 

  Linux,Unix,GNU/Linux	
  software,program,code	
  kernel,linux kernel		
  open source,free software		
  sell,trade,vend,auction
  charge,pay,cost	

:download:`Sample synonym csv file: en_synonym_sample.csv <../_static/faq/en_synonym_sample.csv>`

.. _stopwords_txt_format:

stopwords.txt File Format
------------------------------------------------

The stopword list is a .txt file that on each line one stopword is placed. Please make sure the 
txt file is utf-8 encoded.

:download:`Sample stopwords txt file: zh_tw_stopwords.txt <../_static/faq/zh_tw_stopwords.txt>`

.. Note:: currently customizable stopword is supported only with ``language: zh``. For other languages
   the default ElasticSearch `stopword filter <https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-tokenfilter.html>`_ is used.

.. _policy: 

==============
SeaChat Policy
==============

SeaChat Policy is a dialogue management system that can be integrated as a component to Rasa Core. 

.. contents:: Table of Contents
    :local:
    :depth: 3

Purpose
========

The purpose of a dialogue management system is to decide at each moment in the conversation which action the bot should take next. 
The foundation of Rasa'a dialogue management relies on the TEDPolicy, a transformer model that is trained on conversation 'stories', which contain user intents & entities paired with the desired bot responses and actions. 
While the TEDPolicy is excellent at handling conversational context and responding to unique dialogues, we find it is too heavy weight and too unpredictable for some conversations that follow a simple and consistent path. 
The purpose of SeaChat Dialogue Policy is to provide an alternative which allows developers to have complete control over the bots response to specified situations.   

Implementation
===============

The SeaChat Policy is written as a subclass of the Rasa policy class (rasa.core.policies.policy.policy). 
The policy determines the next action based on a set of hand-written rules which are loaded in from a separate yaml file. 
These rules are represented as states and the policy itself can be thought of as a finite state machine, where each state has a set of entrance conditions, connections to other states, and a set of actions to execute if the bot enters that state. 
Most states are enter-states, meaning that they can be entered at any point in the conversation if their conditions are met; others are direct-connect states meaning that they can only be entered if the bot's previous state connects to it. 
Every time the bot needs to make a decision (usually after a user utterance) the policy evaluates the entrance conditions of each state, calculates a score for each enterable state, and then executes the actions of the highest ranked state. 
The bot will continue to do this until a listen action is triggered, at which point it will stop to listen to the user's input. 

The score of each state is calculated as the sum of 4 values: 
  - The number of entrance conditions it has (+1 per)
  - Rank score specified in dialogue.yml (+rank_score, default: 10)
  - If the bot's previous state connects to it (+5)
  - If that connection is a direct connection (+1000)
 
Once a state is selected, the bot will execute all the actions from that state before re-evaluating. If no state's entrance conditions can be met, it will trigger Rasa's DEFAULT_ACTION_FALLBACK followed by a listen action. Similarly, if the confidence level of the user intent is below the NLU threshold, the policy will trigger the fallback.

Policy Pseudo-code
===================

Upon startup:

.. code-block::

  Get all intent, entity, and action names from domain
  Load dialogue.yml and check validity
  Store states as a graph with a dict to access each node -> name2state

  # build a graph of states recursively
  build_state_graph():
    for state in dialogue.yml:
      build_state_graph_recursively():
        enter_state_dict[state_name] = new state object
        if new state object has connections:
          for each connection build_state_graph_recursively(connection)
  # result: a dictionary where the key is the state name and the value is the state object

Upon Prediction:

.. code-block:: 

  predict_action_probabilities():
    if there is a chain of actions to be executed: 
      return next action in the chain
    if machine reading is activated and the machine reading score < threshold:
      return machine reading action
    if the NLU confidence < threshold: 
      return fallback
    else:
      get_predicted_action():
        for state in name2state:
          get_rank_score():
              # Use Rasa tracker and domain to evaluate each state's entrance conditions
              if any condition evaluates false: 
                return 0
              if direct_connection is True but current_state does not connect: 
                return 0
              if direct_connection is true and current_state connects: 
                return 1000
              if direct_connection is false but current_state connects: 
                return 5 + len(conditions)
              else: 
                return len(conditions)
          if highest state score > 0:
            current_state = highest_state
            return highest_state.actions
          else: return None
      if result is not None:
        action_chain = highest_state.actions
        return first item in action chain
      else: return fallback

Rasa Integration
=================

Rasa's dialogue manager (Rasa Core) is built out of components called policies. 
Every policy is consulted each time the bot needs to make a decision, and each provides a suggested next action and a confidence score. 
Rasa Core chooses the policy with the highest confidence, or in case of a tie, the policy with the highest priority. 
SeaChat Dialogue Policy is designed to work as a standalone dialogue manager, meaning that it is not necessary to use any of Rasa's policies. 
However, it can be used in conjunction with any of Rasa's policies. 

.. IMPORTANT:: The SeaChat Policy always returns a confidence of 1 or 0 and its default priority level is 1.

.. NOTE:: currently SeaChat policy always handles fallbacks; future updates may include introducing a parameter that can turn this off so it can be used with other policies. 

Dialogue.yml File
==================

The dialogue.yml file is the set of rules, or states, that the policy will use to make its decisions.

Dialogue Schema
----------------

.. code-block:: YAML

  $[state name]:
    direct_connection: bool
    rank_score: int
    conditions: list[Text]
      # a list of evaluatable strings
      # can reference certain variables such as SLOTS, INTENT, etc
      - INTENT.name == 'greet'
      - SLOTS.username is not None
    actions: list[Text]
      # a list of action names as defined in domain.yml
      # actions will be executed in order and will continue until an action_listen is triggered
      - utter_greet
      - action_greet_user_by_name
      - action_listen
    connections: State
      - $[state name 2]:
          direct_connection: true
          conditions:
            - state2 is true
          actions:
            - action_state_two

.. TIP:: Each state must have a unique name 

Rank Score
----------

The rank score is used to compute the overall score of each enterable state. The default value is 10, but it can be optionally modified in dialogue.yml to give priority to certain states. 

Example:
``rank_score: 15``

Direct Connection
------------------

If the state's direct connection is true, and the bot's previous state has a connection to it, the state will get a massive rank score boost so that it is almost guarenteed to be selected if its conditions are met. A use case for this is if you ask the user a yes or no question, the response may not have enough specific detail on its own to know the next action; by knowing the previous context the policy can response to a yes/no answer with high confidence. 

Example:
``direct_connection: true``

Conditions
-----------

**required**

The conditions are a list of evaluatable python expressions written as strings. The dialogue file has 'access' to certain information from the bot which can be used to evaluate conditions and execute actions. The following are the variables that can be used in the dialogue file to access information about the current state of the bot:

+-----------------+-----------------+------------------------------------------------+
| VARIABLE        | TYPE            | DESCRIPTION                                    |
+=================+=================+================================================+
| ``INTENT``      | Dict[Text, Any] | A dict with the most recent INTENT info of     |
|                 |                 | the user. The available keys are               |
|                 |                 | ``name`` and ``confidence``                    |
+-----------------+-----------------+------------------------------------------------+
| ``ENTITIES``    | List[Text]      | A list of entity names that appeared in the    |
|                 |                 | last utterance                                 |
+-----------------+-----------------+------------------------------------------------+
| ``RESPONSES``   | Dict[Text, Any] | A dict of template name/utterance pairs        |
|                 |                 | from the domain. For example,                  |
|                 |                 | ``RESPONSES.greet`` will return a list of      |
|                 |                 | all utterance templates available for this     |
|                 |                 | template.                                      |
+-----------------+-----------------+------------------------------------------------+
| ``SLOTS``       | Dict[Text, Any] | A dict with slot-name slot-value pairs. For    |
|                 |                 | example: ``SLOTS.item`` might return the user- |
|                 |                 | specified item ``Americano``.                  |
+-----------------+-----------------+------------------------------------------------+
| ``LAST_UTT``    | Text            | The most recent utterance from the bot         |
+-----------------+-----------------+------------------------------------------------+
| ``LAST_ACTION`` | Text            | The name of the most recent action             |
|                 |                 | executed by the bot                            |
+-----------------+-----------------+------------------------------------------------+

Example:

.. code-block:: YAML

  conditions:
    - INTENT.name == 'greet'
    - SLOTS.name is None

Actions
--------

**required**

A list of actions to be executed in order by the bot if the state is chosen. These action or utterance names should be exactly as they appear in domain.yml.

Example:

.. code-block:: YAML

  actions:
    - utter_greet
    - action_ask_name
    - action_listen

Connections
-------------

Connections represent a chain of dialogue where you expect certain turns from the bot and user to take place in order. The connections attribute is a list of other states, and these connections can expand recursively. A connection gives a small 5 point rank score boost, or a large 1000 point boost if the direct_connection attribute is true.

Example:

.. code-block:: YAML

  connections:
    - $[gave name]:
        conditions:
          - SLOTS.name is not None
        actions:
          - action_greet_with_name

Dialogue Example
-----------------

Here's a small example of a conversation path where the user says 'good morning' and the bot asks if they'd like to hear today's weather.

.. code-block:: YAML

  $[good morning]:
    rank_score: 20
    conditions:
      - INTENT.name == 'good_morning'
    actions:
      - utter_good_morning
      - utter_ask_weather
      - action_listen
    connections:
      - $[weather yes]:
          direct_connection: true
          conditions:
            - INTENT.name is 'affirm'
          actions:
            - action_get_weather
          connections:
            - $[got weather]:
                direct_connection: true
                conditions:
                  - SLOTS.weather is not None
                actions:
                  - utter_weather
                  - action_set_weather_to_none
                  - action_listen
            - $[get weather fail]:
                direct_connection: true
                conditions:
                  - SLOTS.weather is None
                actions:
                  - utter_weather_error
                  - action_listen
      - $[weather no]:
          direct_connection: true
          conditions:
            - INTENT.name == 'deny'
          actions:
            - utter_no_weather
            - action_listen

Visualization
==============

The policy also includes built-in visualization tools to help with developing and debugging the dialogue.yml file. 
If the visualization tools are activated, during train and runtime the dialogue policy will output data to create a tree-like representation of the dialogue states. 
The policy can output this data in `dot <https://graphviz.org/doc/info/lang.html>`_ and/or `Vega <https://vega.github.io/vega/>`_ format. 
When using dot format, a `vscode extension <https://marketplace.visualstudio.com/items?itemName=joaompinto.vscode-graphviz>`_ can be installed to view the graphic in a window of the IDE. 
If the Vega version is selected, a new window in the default web browser will automatically open when a Rasa session is started locally. 
In general, the dot format is much simpler, and is generated as a static image. 
The Vega format is more complex, allowing for interaction with the graphic in the web browser. 
The output type can be set with the ``output_json`` and ``output_dot`` flags in the config file.

.. IMPORTANT:: For the vega format, the policy requires a tree specification file named ``flow_data.json`` to be present in the visualization directory. The tree specification contains all the information about how the tree will be rendered. The dialogue policy will read this file and output new spec files with updated ``data`` fields. Unlike the dot format, the vega ``flow_data.json`` can be updated to adjust the look of the output graphic. 

For both formats, they can be configured for three different kind of output. 
In the Rasa config file, if ``output_static_visualization`` is true, the bot will output a simple graphic of the full dialogue flow at train time and runtime. 
If ``output_at_each_turn`` is true, the policy will output a separate data file with conversation-state-specific data (such as current state, enterable states, tracker data, etc). 
These files will be output numerically so that the transitions of the conversation can be viewed later. 
Lastly, if ``output_live_update`` is true, the bot will output one file titled ``live_update_state_data.{ext}``, which will be overridden each time the policy is called. 
The result is that the developer can view the graphic in real time while interacting with the bot. 

Interpreting the Graphic
-------------------------

- Direct/indirect connections: the type of connections between nodes represents whether it is a direct connection or not.

  - Dotted line = indirect connection
  - Solid line = direct connection

- Current state: the state that was chosen most recently. The actions from this state have already been executed by the bot.

  - Green highlighted state (dot: green bot around state info; json: green dot for state node)

- Enterable states: all states that have their conditions met by at the current state of the conversation.

  - Black connection to that node, can be dotted or solid

- Next state: the state that will be executed next. All of the conditions are met and it has the highest ranks score of all the enterable nodes.

  - Green connection to that node, can be dotted or solid

- Rank score: the rank score for that state

  - A number labeling the node or the transition between nodes

- Vega only:

  - Tracker: a separate node next to to the enter node, which contains information about the current tracker state.
  - Hover actions: hovering over a node will display the conditions and actions for that node.


How to Use Policy
------------------

**Add to config.yml**

In order to use the policy with Rasa, you must specify the policy in the configuration file. The only required field is the name, which should be the path to the SeaChatPolicy class from your working directory. Additionally, you can specify the location of the dialogue file (default: ``./dialogue.yml``), and the nlu threshold that determines when the fallback action will be triggered (default: ``.40``). If the bot needs to use the machine reading reviews system, you need to indicate that the policy should use it (default: ``false``), as well as specifying the threshold for using the machine reading answer (default: ``.40``) and the path to the required file (default: ``./data/gm_reviews.text``). As a note, the machine reading reviews system only works with Rasa 2x+. The SeaChat Policy can be used as the only policy in the config, or it can be used alongside other Rasa policies.

Configurable parameters:

+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| NAME                           | TYPE  | DESCRIPTION                                           | DEFAULT                   |
+================================+=======+=======================================================+===========================+
| ``name``                       | Text  | The path the ngChatPolicy *class*, not just the file. | None                      |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| ``dialogue_path``              | Text  | The path to the dialogue.yml file.                    | ``./dialogue.yml``        |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| ``nlu_threshold``              | float | Fallback threshold for nlu intent classification.     | ``.40``                   |
|                                |       | If the NLU intent classification confidence is below  |                           |
|                                |       | the threshold, the policy will default to the         |                           |
|                                |       | fallback action.                                      |                           |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| ``use_mr``                     | bool  | Whether machine reading is used in the bot.           | ``False``                 |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| ``mr_threshold``               | float | Threshold for the machine reading system. If the      | ``.40``                   | 
|                                |       | machine reading conficence is below the threshold,    |                           |
|                                |       | the policy will default to the DIET classifier        |                           |
|                                |       | classification.                                       |                           |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| ``mr_text_path``               | Text  | The path to the reviews text file.                    | ``./data/gm_reviews.txt`` |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+
| ``visual``                     | Dict  | A dict of visualization configurations, see next table|                           |
+--------------------------------+-------+-------------------------------------------------------+---------------------------+

Visualization parameters:

+--------------------------------+-------+-------------------------------------------------------+--------------------+
| NAME                           | TYPE  | DESCRIPTION                                           | DEFAULT            |
+================================+=======+=======================================================+====================+
| ``visualization_directory``    | Text  | The path to a folder where the visualization          | ``./visual``       |
|                                |       | output will be stored.                                |                    |
+--------------------------------+-------+-------------------------------------------------------+--------------------+
| ``output_static_visualization``| bool  | Whether or not to output a static visualization       | ``True``           |
|                                |       | at train time and runtime.                            |                    |
+--------------------------------+-------+-------------------------------------------------------+--------------------+
| ``output_at_each_turn``        | bool  | Whether or not to output an individual data file      | ``False``          |
|                                |       | each time the dialogue policy is called.              |                    |
+--------------------------------+-------+-------------------------------------------------------+--------------------+
| ``output_live_update``         | bool  | Whether or not to output a file that updates itself   | ``True``           |
|                                |       | in real-time.                                         |                    |
+--------------------------------+-------+-------------------------------------------------------+--------------------+
| ``output_vega``                | bool  | Whether or not to output json formatted               | ``True``           |
|                                |       | visualization files.                                  |                    |
+--------------------------------+-------+-------------------------------------------------------+--------------------+
| ``vega_spec_path``             | Text  | The path to a vega ``flow_data.json`` file            | ``./visual/tree    |
|                                |       |                                                       | _spec.json``       |
+--------------------------------+-------+-------------------------------------------------------+--------------------+
| ``output_dot``                 | bool  | Whether or not to output dot formatted                | ``True``           |
|                                |       | visualization files.                                  |                    |
+--------------------------------+-------+-------------------------------------------------------+--------------------+

Example:

.. code-block:: YAML

  policies:
    - name: seachat_plugins.core.policy.ngchat.ngChatPolicy
      dialogue_path: ./dialogue.yml
      nlu_threshold: .40
      use_mr: true
      mr_threshold: .40
      visual:
        visualization_directory: ./visual
        output_static_visualization: false
        output_at_each_turn: false
        output_live_update: true
        output_vega: true
        vega_spec_path: ./visual/flow_data.json
        output_dot: false

Write the Dialogue File
------------------------
Write the rules/states that will guide the policy to determine the next action at any point in the conversation. Here are some tips and guiding principles to consider when writing the dialogue file:
  * Start with states that have a simple 'if this, then do that' behavior and don't rely on previous context; when all the simple states are working, then move on to the more complex states.
  * States with very concrete and specific conditions (for example, an intent that always triggers the same response) should have a high priority. Meanwhile, I think of the conversation path that leads towards the end goal as the undercurrent of the conversation; if the user doesn't ask for anything more specific, the bot should default to leading the user to the end goal. 

    * For example, if the purpose of the bot is to get a user to order a coffee, the 'order coffee' path actually has a lower priority than most of the other states. This way, if the user asks for something specific, like seeing the menu or asking an FAQ, the bot will always address that first before heading back to the 'order coffee' path.

  * As many states as possible should be available to the user at all times. Similarly, direct connections should be avoided unless necessary.
  * Direct connections should only be used in cases where entrance to the next state should be guarenteed if the conditions are met and/or if the state conditions cannot be restrictive enough to give admittance at the proper time.

    * For example, the bot asks a yes or no question and the two direct connection states have the conditions ``INTENT.name == affirm`` and ``INTENT.name == deny``. These conditions are not clear enough to be on their own, and if one of the conditions is met directly after the previous state, the state should be activated 100% of the time.
  
  * A state should only be entered if its conditions are met, but restrict entrance to the state with its conditions so that it is only entered at the proper time

.. TIP:: yaml format does not like to start a value with a quotation mark unless the whole value is quoted (``'action_greet'``: OK | ``'item' in ENTITIES``: ERROR). In this case you will have to quote the whole value and then use scare quotes for the substring: ex/ ``"'item' in ENTITIES"``

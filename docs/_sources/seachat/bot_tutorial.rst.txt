.. _bot_tutorial:

======================
SeaChat Bot Tutorial 
======================

.. contents:: Table of Contents
    :local:
    :depth: 3

.. toctree::
   :maxdepth: 2
   :caption: Tutorial Shortcuts:

   policy_tutorial.rst 
   ../cart/tutorial.rst 
   faq_tutorial.rst
   deployment_tutorial.rst
   example_files.rst

The purpose of this tutorial is to demonstrate how SeaChat products can be used with Rasa chatbots. In this tutorial we will walk-through:
    - How to use SeaChat Dialogue finite state machine-based policy for dialogue management
    - How to integrate SeaChat Cart as a backend for e-commerce bots
    - How to incorporate SeaChat FAQ for fast and accurate FAQ response

The end result will be a relatively simple cafe ordering bot that can answer FAQs, ask the user what they want, display the menu, and validate a user's item request. The bot will lay the groundwork for using all three SeaChat compenents and can be easily customized or built-upon to work towards a more complex e-commerce bot.

Before Starting
================

It is highly encouraged that before starting this tutorial, you are familiar with `Rasa Open Source <https://rasa.com/docs/rasa/>`_. If you have not used
Rasa before, we suggest completing the `Rasa tutorial <https://legacy-docs-v1.rasa.com/1.8.3/user-guide/rasa-tutorial/>`_ before
starting the SeaChat tutorial. Additionally, before starting *this* tutorial please initialize a new Rasa bot in a new
directory.

.. code-block:: 

    $ mkdir tutorial_bot
    $ cd tutorial_bot
    $ rasa init

.. IMPORTANT:: SeaChat is built on top of Rasa 2.2.x, make sure you are using this version, or there may be compatibility issues. 

We will use this simple bot to walk through how to incorporate each SeaChat component.  

Bot Command Reference
----------------------

+--------------------------+----------------------+
| Train                    | ``rasa train``       |
+--------------------------+----------------------+
| Run in terminal          | ``rasa shell``       |
+--------------------------+----------------------+
| Start the actions server | ``rasa run actions`` |
+--------------------------+----------------------+

.. TIP:: Remember to re-train the bot each time you modify ``domain.yml`` or any of you training data. Also remember to restart the actions server after any changes to ``actions.py``.

.. TIP:: Remember to always have an ElasticSearch instance running *before* training and running the bot (if you are using SeaChat FAQ or SeaChat Cart). And start the actions server *before* running the bot.

Optional: Chatette Setup
-------------------------
`Chatette <https://github.com/SimGus/Chatette>`_ is a powerful data generation tool for NLU training data. The cart tutorial will include tools for generating chatette files, so if you are not familiar with chatette, it is highly suggested to review its use and try it out in the tutorial bot. You can find an example chatette template file :ref:`here <bot_chatette>`.

SeaChat Policy
==============
SeaChat Policy is a custom Rasa policy component. It will allow you to define simple and consistent rules for your dialogue flow.
The policy can be used as a stand-alone dialogue manager or can be used in conjunction with other Rasa policies. 
The tutorial will walk through how to add the policy to your configuration, how to write the dialogue states, 
and how to view dialogue states via dynamic visualization. 

:ref:`Policy Tutorial ---> <policy_tutorial>`

SeaChat Cart
============
SeaChat Cart is a cart management backend for e-commerce chatbots. It will allow your bot to query a menu, customize items, and
modify the user's cart. The tutorial will walk through how to format the menu, configure the cart to work with your bot, and
use the cart methods in Rasa custom actions.

:ref:`Cart Tutorial ---> <cart_tutorial>`

SeaChat FAQ
===========
SeaChat FAQ is a fast and accurate response selector component for Rasa. The tutorial will explain why SeaChat FAQ is a better
alternative to Rasa's ResponseSelector, how to set up the component, and how to format the data.

:ref:`FAQ Tutorial ---> <faq_tutorial>`

SeaChat Extension & Deployment
==============================
SeaChat extension is a plugin for the VSCode IDE. Through the extension, you can register a new bot on the Seasalt cluster and integrate it in our deployment workflow. This final tutorial will show you how to install the extension, register a bot, and train, deploy & debug on the cluster.

:ref:`Deployment Tutorial ---> <deployment_tutorial>`
